% matlabpool open;
load('..\basedata.mat');
addpath('..\..\Research\Code\Tools\liblinear\matlab');

c = Xf(:,26:30)*price'-cv; %price - cost
TEST = 1;
MAX_ITER = 1000;
prob_set = cell(TEST,1);
dx_set = cell(TEST,1);
partworths_set = cell(TEST,1);
target_best_set = zeros(TEST,1);
s = 1e4;
inq = 100;
W0 = mvnrnd(zeros(1,d),eye(length(w)),s);
XID = 1:30; 
XID(5:5:30)=[];
sigma = 1e-6;
Dw = eye(30)*sigma; % randomness in user choices

nt = size(Xf,1); % number of testing object
% nt = 10;

theta = 1;
wtrue = w*theta;
wtrue(1:5) = wtrue(1:5)-wtrue(5);
wtrue(6:10) = wtrue(6:10)-wtrue(10);
wtrue(11:15) = wtrue(11:15)-wtrue(15);
wtrue(16:20) = wtrue(16:20)-wtrue(20);
wtrue(21:25) = wtrue(21:25)-wtrue(25);
wtrue(26:30) = wtrue(26:30)-wtrue(30);

num_competitor = 1;

for test = 1:TEST
    rng(test);
    fprintf('\n%%%%%%%% test number %d %%%%%%%%%%',test);
    
    % Calculate true distribution under sigma
    Wtrue = mvnrnd(wtrue,Dw,s);
    util = (Wtrue*Xf(1:nt,:)');
    competitors = randperm(nt,num_competitor);
    util_competitor = util(:,competitors);
    util_competitor_all = kron(util_competitor,ones(1,nt));
    util_all = repmat(util,1,num_competitor);
    exp_delta_util = exp(-util_all+util_competitor_all);
    exp_sum_delta_util = exp_delta_util*repmat(eye(nt),num_competitor,1)+1;
    obj_app = bsxfun(@plus,-log(exp_sum_delta_util),log(c(1:nt,:)'));
    best = bsxfun(@eq, obj_app, max(obj_app,[],2));
    best = best.*util;
    best(best==0) = -1e9;
    best = bsxfun(@eq, best, max(best,[],2));
    target_dist = sum(best/s)';
    [~,target_best] = max(target_dist);
%     target_best = 1701;
    target_best_set(test) = target_best;

    
    queryID = dXID;
    nx = size(Xf,1);
    DX = dXID + dXID';
    probability_obj_set = zeros(nt,MAX_ITER);
    partworths = zeros(d,MAX_ITER);
    dxs = zeros(MAX_ITER,length(wtrue));
%     probability_obj_set = [prob_set{test},zeros(2455,500)];
%     partworths = [partworths_set{test},zeros(30,500)];
%     pairs = [pairs_set{test};zeros(500,2)];
    nq = 1;
    nquery = sum(sum(queryID>0));
    queryList = ones(nquery,1);
        
    % find the next query
    while  nq<=MAX_ITER
        % calculate A
        A = dxs(1:nq-1,:);
        [probability_obj,W,I,unique_I,w0,C,weights] = ...
            appObjDistribution(s,length(XID),W0(:,XID),Xf(1:nt,XID),c(1:nt,:),A,competitors);

        util = Xf(1:nt,XID)*w0';
        obj_app = bsxfun(@plus,-log(1+exp(-util)),log(c(1:nt,:)));
        
        
        [~,guess] = max(probability_obj);
        fprintf('iter: %d, truth: %d (%f), guess: %d, point guess: %d, corr: %0.2f \n',...
            nq, target_best, probability_obj(target_best), guess,...
            find(obj_app==max(obj_app),1), corr(w0',wtrue(XID)'));

        if nq>1
            options = w0;
        else
            options = rand(1,length(w0)); % random initial dx
        end
        newdx = zeros(1,30);
        newdx([1:4,6:9,11:14,16:19,21:24,26:29]) = options;

        w_now = mvnrnd(wtrue,Dw,1)'*theta;
        u = newdx*w_now;
        if rand()<1/(1+exp(-u))
            dxs(nq,:) = options;
        else
            dxs(nq,:) = -options;
        end

        probability_obj_set(:,nq) = probability_obj;
        partworths(XID,nq) = w0';
        nq = nq+1;               

    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    prob_set{test} = probability_obj_set;
    pairs_set{test} = pairs;
    partworths_set{test} = partworths;
end
save(['toubia_s',num2str(s),'_n',num2str(MAX_ITER),...
    '_comp',num2str(num_competitor),'_theta',num2str(theta),'_0513.mat'],...
    'prob_set','dxs_set','partworths_set','target_best_set','-v7.3');